function cohCon2csv ( e, skipeye)

global analysis
% This function writes three files, 'main(Run#).csv', 'per(Run#).csv', and
% run(Run#).csv'. Which each contain the information held by the 'exp.mat'
% file generated by genExp.m. The .csv file is in LONG form which can then
% be read and manipulated by R later.
% Caution:
%   This design is straightforward, but re-organizes the data according to
%   trial numbers. If there is an error in this function, it will propagate
%   throughout your analysis and be very difficult to detect. If you modify
%   this, run some case tests before comitting your modifications.

main = e{1};
try
    eye = e{2};
    noeye = false;
catch
    noeye = true;
end

% for saving files
runNum = main.runVars.runNum;

saveLoc = fullfile(analysis.anFolder,'csv');

if ~isdir(saveLoc)
    mkdir(saveLoc);
end
mainFile = fullfile(saveLoc,sprintf('main%02.f.csv',runNum));
runFile = fullfile(saveLoc,sprintf('run%02.f.csv',runNum));
eyeFile = fullfile(saveLoc,sprintf('eye%02.f.csv',runNum));

%% Write Eye

if ~noeye && ~skipeye
    if ~exist(eyeFile,'file')
        if ~isempty(eye)
            eyeHeader = {'trial','time','xPos','yPos','pupil'};
            
            eyeData = [];
            for t = 1:size(eye.xPos,1)
                s = size(eyeData,1) + 1;
                e = size(eyeData,1) + size(eye.xPos,2);
                % trial t
                eyeData(s:e,1) = repmat(t,size(eye.xPos,2),1);
                eyeData(s:e,2) = eye.time;
                for i = 3:length(eyeHeader)
                    eyeData(s:e,i) = eye.(eyeHeader{i})(t,:)*1000;
                end
            end
            % Now write to eyeFile
            disp(sprintf('(fade2csv) Writing eye file... %s',eyeFile));
            tic
            csvwriteh(eyeFile,eyeData,eyeHeader);
            time = toc;
            disp(sprintf('Success in %02.2f (s)',time));
        end
    else
        disp(sprintf('File %s found, not over-writing!',eyeFile));
    end
end

%% Write Main

if ~exist(mainFile,'file')
    % just to track trials
    main.trialNum = 1:main.nTrials;
    
    % First re-organize into a matrix, tracking the headers
    mainHeader = { 'RT', 'trial', ...
        'run', ... % runVars
        'task', 'conDelta','cohDelta','coherence', 'contrast', 'trialNum', 'correct', ... % rand items
        'conSide','cohSide','direction','conPedestal','cohPedestal','isCatch'}; % parameter items
    
    
    % For each item in the header (re-named) what is the corresponding data?
    corrData = {'reactionTime', 'blockTrialNum'};
    % These come AFTER all the corrData items. They are pulled from
    % 'main.runVars'
    runData = {'runNum'};
    % 'main.randVars'
    randData = {'task', 'conDelta','cohDelta','coherence', 'contrast', 'trialNum', 'correct'};
    % these are pulled from main.parameter
    pedData = {'conSide','cohSide','dir','conPedestal','cohPedestal','catch'};
    
    if length(randData)+length(runData)+length(corrData)+length(pedData) ~= length(mainHeader)
        error('Lengths are incorrect! Check your variables');
    end
    
    mainData = [];
    
    % mainData(:,1) % COLUMN 1
    for i = 1:length(corrData)
        mainData(:,end+1) = main.(corrData{i});
    end
    
    for i = 1:length(runData)
        mainData(:,end+1) = repmat(main.runVars.runNum,size(mainData,1),1);
    end
    
    for j = 1:length(randData)
        mainData(:,end+1) = main.randVars.(randData{j});
    end
    
    for k = 1:length(pedData)
        mainData(:,end+1) = main.parameter.(pedData{k});
    end
    
    if size(mainData,2)~=length(mainHeader)
        error('Lengths are incorrect! Check your variables');
    end
    
    % Now write to mainFile
    disp(sprintf('(fade2csv) Writing main file... %s',mainFile));
    csvwriteh(mainFile,mainData,mainHeader);
    disp('Success');
else
    disp(sprintf('File %s found, not over-writing!',mainFile));
end

%% Write run

if ~exist(runFile,'file')
    runHeader = {'task','pedestal','pedVal'};
%     rData = [main.runVars.pedestals.contrast(1),...
%         main.runVars.pedestals.contrast(2),...
%         main.runVars.pedestals.contrast(3),...
%         main.runVars.pedestals.contrast(4),...
%         main.runVars.pedestals.coherence(1),...
%         main.runVars.pedestals.coherence(2),...
%         main.runVars.pedestals.coherence(3),...
%         main.runVars.pedestals.coherence(4)];
    rData = [main.runVars.pedestals.contrast(1),...
        main.runVars.pedestals.coherence(1)];
    counter = 1;
    runData = [];
    taskOpts = [1 2];
    taskNames = {'coherence', 'contrast'};
    for j = 1:2
        ct = taskOpts(j);
        for pedNum = 1
            runData(end+1,:) = [ct pedNum main.runVars.pedestals.(taskNames{ct})(pedNum)];
            counter = counter+1;
        end
    end
        
    
    disp(sprintf('(fade2csv) Writing run file... %s',runFile));
    csvwriteh(runFile,runData,runHeader);
    disp('Success');
else
    disp(sprintf('File %s found, not over-writing!',runFile));
end

end

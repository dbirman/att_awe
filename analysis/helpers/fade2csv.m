function fade2csv ( e )

global analysis
% This function writes three files, 'main(Run#).csv', 'per(Run#).csv', and
% run(Run#).csv'. Which each contain the information held by the 'exp.mat'
% file generated by genExp.m. The .csv file is in LONG form which can then
% be read and manipulated by R later.
% Caution:
%   This design is straightforward, but re-organizes the data according to
%   trial numbers. If there is an error in this function, it will propagate
%   throughout your analysis and be very difficult to detect. If you modify
%   this, run some case tests before comitting your modifications.

main = e{1};
eye = e{2};

% for saving files
runNum = main.runVars.runNum;

saveLoc = fullfile(analysis.anFolder,'csv');

if ~isdir(saveLoc)
    mkdir(saveLoc);
end
mainFile = fullfile(saveLoc,sprintf('main%02.f.csv',runNum));
runFile = fullfile(saveLoc,sprintf('run%02.f.csv',runNum));

%% Write Main

% just to track trials
main.trialNum = 1:main.nTrials;

% First re-organize into a matrix, tracking the headers
mainHeader = {'trial','RT','response' ...
    'correct','tPos','cPos','catch','tGen','tCon','cCon','dPed','tImg','cImg' ... % rand items
    'blockTrial'}; % parameter items
    

% For each item in the header (re-named) what is the corresponding data?
corrData = {'trialNum','reactionTime','response'};
% These come AFTER all the corrData items. They are pulled from
% 'main.randVars'
randData = {'correct','target','changeTarget','catch','tGen','tCon','cCon','deltaPed','tImage','cImage'};

pedData = {'blockTrialNum'};

if length(randData)+length(corrData)+length(pedData) ~= length(mainHeader)
    error('Lengths are incorrect! Check your variables');
end

mainData = [];

% mainData(:,1) % COLUMN 1
for i = 1:length(corrData)
    mainData(:,end+1) = main.(corrData{i});
end

for j = 1:length(randData)
    mainData(:,end+1) = main.randVars.(randData{j});
end

for k = 1:length(pedData)
    mainData(:,end+1) = main.parameter.(pedData{k});
end

% Now write to mainFile
csvwriteh(mainFile,mainData,mainHeader);

%% Write run

% % runHeader = {'dual','blockType'};
% % runData = [run.runVars.dual run.runVars.blocks(end)];
% % 
% % csvwriteh(runFile,runData,runHeader);

end
